##############################################################################
#                                                                            #
# Teacup - Lean and efficient firmware for RepRap printers                   #
#                                                                            #
# by Triffid Hunter, Traumflug, jakepoz, Markus Hitter, many others          #
#                                                                            #
# This firmware is Copyright (c) ...                                         #
#   2009 - 2010 Michael Moon aka Triffid_Hunter                              #
#   2010 - 2013 Markus "Traumflug" Hitter <mah@jump-ing.de>                  #
#                                                                            #
# This program is free software; you can redistribute it and/or modify       #
# it under the terms of the GNU General Public License as published by       #
# the Free Software Foundation; either version 2 of the License, or          #
# (at your option) any later version.                                        #
#                                                                            #
# This program is distributed in the hope that it will be useful,            #
# but WITHOUT ANY WARRANTY; without even the implied warranty of             #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              #
# GNU General Public License for more details.                               #
#                                                                            #
# You should have received a copy of the GNU General Public License          #
# along with this program; if not, write to the Free Software                #
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA #
#                                                                            #
##############################################################################

##############################################################################
#                                                                            #
# Makefile for AVR (ATmega-based) targets. Use it with                       #
#                                                                            #
#   make -f Makefile-AVR                                                     #
#                                                                            #
# or copy/link it to Makefile for convenience.                               #
#                                                                            #
##############################################################################

##############################################################################
#                                                                            #
# Change these to suit your hardware                                         #
#                                                                            #
##############################################################################

# MCU_TARGET = atmega168
# MCU_TARGET = atmega328p
MCU_TARGET = atmega644p
# MCU_TARGET = atmega1280
# MCU_TARGET = atmega2560
# MCU_TARGET = at90usb1287
# MCU_TARGET = atmega32u4

# CPU clock rate
F_CPU = 16000000L
# F_CPU = 8000000L

##############################################################################
#                                                                            #
# Where to find your compiler and linker. Later, this is completed like      #
#   CC = $(TOOLCHAIN)gcc                                                     #
#                                                                            #
##############################################################################

TOOLCHAIN = avr-
# TOOLCHAIN = /usr/bin/avr-
# TOOLCHAIN = <path-to-arduino-folder>/hardware/tools/avr/bin/avr-

##############################################################################
#                                                                            #
# Programmer settings for "make program"                                     #
#                                                                            #
##############################################################################

# avrdude, typical for AVR-based architectures.
#
# Flags:
#   -c <programmer-type>      Typically stk500 or stk500v2.
#   -b <baudrate>             Upload baud rate. Depends on the bootloader in
#                             use. Not used for USB programmers.
#   -p <mcu type>             See MCU_TARGET above.
#   -P <port>                 Serial port the electronics is connected to.
#   -C <config file>          Optional, default is /etc/avrdude.conf.

UPLOADER = avrdude
# UPLOADER = <path-to-arduino-folder>/hardware/tools/avrdude

UPLOADER_FLAGS  = -c stk500v2
# UPLOADER_FLAGS += -b 19200
# UPLOADER_FLAGS += -b 57600
UPLOADER_FLAGS += -b 115200
UPLOADER_FLAGS += -p $(MCU_TARGET)
# UPLOADER_FLAGS += -P COM1
# UPLOADER_FLAGS += -P /dev/ttyACM0
UPLOADER_FLAGS += -P /dev/ttyUSB0
# UPLOADER_FLAGS += -C <path-to-arduino-folder>/hardware/tools/avrdude.conf


##############################################################################
#                                                                            #
# Below here, defaults should be ok.                                         #
#                                                                            #
##############################################################################

PROGRAM = teacup

# Arduino IDE takes the "compile everything available"-approach, so we have
# to keep this working and can take a shortcut:
SOURCES = $(wildcard *.c)

CFLAGS  = -DF_CPU=$(F_CPU)
CFLAGS += -mmcu=$(MCU_TARGET)
CFLAGS += -g
CFLAGS += -Wall
CFLAGS += -Wstrict-prototypes
CFLAGS += -std=gnu99
CFLAGS += -funsigned-char
CFLAGS += -funsigned-bitfields
CFLAGS += -fpack-struct
CFLAGS += -fshort-enums
CFLAGS += -Winline
CFLAGS += -fno-move-loop-invariants
CFLAGS += -fno-tree-scev-cprop
CFLAGS += -Os
CFLAGS += -ffunction-sections
CFLAGS += -finline-functions-called-once
CFLAGS += -mcall-prologues

LDFLAGS  = -Wl,--as-needed
LDFLAGS += -Wl,--gc-sections

LIBS  = -lm

-include Makefile-common

# Architecture specific targets

.PHONY: program size

program: $(PROGRAM).hex config.h
	$(UPLOADER) $(UPLOADER_FLAGS) -U flash:w:$(PROGRAM).hex

size: $(BUILDDIR)/$(PROGRAM).elf
	@echo "    SIZES             ATmega...  '168    '328(P)    '644(P)    '1280"
	@$(OBJDUMP) -h $^ | perl -MPOSIX -ne '/.(text)\s+([0-9a-f]+)/ && do { $$a += eval "0x$$2" }; END { printf "    FLASH : %5d bytes          %3d%%      %3d%%       %3d%%      %3d%%\n", $$a, ceil($$a * 100 / (14 * 1024)), ceil($$a * 100 / (30 * 1024)),ceil($$a * 100 / (62 * 1024)), ceil($$a * 100 / (126 * 1024)) }' 
	@$(OBJDUMP) -h $^ | perl -MPOSIX -ne '/.(data|bss)\s+([0-9a-f]+)/ && do { $$a += eval "0x$$2" }; END { printf "    RAM   : %5d bytes          %3d%%      %3d%%       %3d%%      %3d%%\n", $$a, ceil($$a * 100 / (1 * 1024)), ceil($$a * 100 / (2 * 1024)),ceil($$a * 100 / (4 * 1024)), ceil($$a * 100 / (8 * 1024)) }'
	@$(OBJDUMP) -h $^ | perl -MPOSIX -ne '/.(eeprom)\s+([0-9a-f]+)/ && do { $$a += eval "0x$$2" }; END { printf "    EEPROM: %5d bytes          %3d%%      %3d%%       %3d%%      %3d%%\n", $$a, ceil($$a * 100 / (1 * 1024)), ceil($$a * 100 / (2 * 1024)), ceil($$a * 100 / (2 * 1024)), ceil($$a * 100 / (4 * 1024)) }'


##############################################################################
#                                                                            #
# Simulator                                                                  #
#                                                                            #
##############################################################################

SIM_PATH = simulator
SIM_SOURCES := $(subst $(SIM_PATH)/,,$(wildcard $(SIM_PATH)/*.c))
SIM_SOURCES += $(filter-out $(subst _sim.c,.c,$(SIM_SOURCES)),$(SOURCES))
SIM_HEADERS  = config.h serial.h dda.h timer.h clock.h temp.h sermsg.h
SIM_HEADERS += dda_queue.h debug.h sersendf.h heater.h analog.h delay.h
SIM_HEADERS += simulator.h

SIM_OBJ = $(patsubst %.c,$(BUILDDIR)/%.sim.o,$(SIM_SOURCES))
SIM_CFLAGS  = -g -Wall -Wstrict-prototypes -Wno-format -Os $(DEFS) -std=gnu99
SIM_CFLAGS += -funsigned-char -funsigned-bitfields -fshort-enums -I.. -I.

# Satisfy all current config chip targets
SIM_CFLAGS += -DSIMULATOR -D__AVR_ATmega644P__ -D__AVR_ATmega1280__
SIM_CFLAGS +=-D__AVR_ATmega2560__ -D__AVR_ATmega32U4__ -D__AVR_AT90USB1286__

$(BUILDDIR)/%.sim.o: %.c $(SIM_HEADERS)
	@echo "  CC        $@"
	@cc -DDEBUG -c $(SIM_CFLAGS) -o $@ $<

sim: $(SIM_OBJ)
	@echo "  LINK      $@"
	@cc $(SIM_CFLAGS) -o $@ $^

vpath %.c $(SIM_PATH)
